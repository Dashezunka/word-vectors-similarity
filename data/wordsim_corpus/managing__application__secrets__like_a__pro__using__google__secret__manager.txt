Demo Application

Create a spring boot application using the Spring Initializer website,

Spring Initializer

We have added the following dependencies,

spring-cloud-gcp-starter — useful to bootstrap different gcp modules.

spring-cloud-gcp-starter-secretmanager — bootstrap secret manager configurations.

appengine-maven-plugin — used to deploy the application to AppEngine.

Configuration

The secret manager starter library offers spring bootstrap configurations to load GCP secrets into application properties. In the src/main/resources/bootstrap.yml file,

secretmanager.enabled — is used to enable/disable auto-configuration for the secret manger, useful for local development.

secretmanager.bootstrap.enabled — is used to load the GCP secrets as an application source.

secretmanager.secret-name-prefix — this is used by the bootstrap service to only load secret whose property name has this prefix. Useful to distinguish between GCP secrets and other secrets.

GCP_SECRETS_ENABLED — is the environment variable that is used to enable/disable secret manager service.

That's it, now you can use the GCP secrets in the application properties. Here I am using Spring Profiles to have two profile settings, one for prod which has the secret manager enabled and one for default without the secret manager, for local development. In application-prod.yml

application-prod.yml

As you can see, googleClientId & googleClientSecret takes the value from GCP secrets whose name has the prefix gcp-secrets. , which will be loaded by the secret manager service.

Using Secrets

Now, we can use the @ConfigurationProperties to load these secrets into our code, notice the prefix app.secrets it should match with the application.yml configuration.

AppSecrets Configuration

And also create a simple Controller to make sure all the setup is working fine,

Sample Controller to access the secrets

For the final touch, add the app engine app.yml configuration to deploying the application, we have added the environment variables to specify the spring active profile and to enable the Secret Manage service for prod ,

app.yml configuration

Deploy your application using the maven goal,

mvn clean package appengine:deploy \

-Dapp.deploy.projectId=GCP_PROJECT \

-Dapp.deploy.version=VERSION

Voilà, we now have a production application accessing the secrets using Google Secret Manager, without any boilerplate code,