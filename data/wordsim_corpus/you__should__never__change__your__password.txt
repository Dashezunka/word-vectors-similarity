Summary

If you remember one only thing from this posting, this should be it: To ensure users have strong passwords, make your password policies as user-friendly and as easy to comply with as possible.

Passwords have always been one of our weakest forms of security. As a single authentication factor, they have become technologically obsolete.

The latest NIST password guidance obliterates all of our past security mantras concerning passwords. Its guidance will require most organizations to completely rethink their password policies and potentially require significant resources to implement those changes. However, we really don’t have any choice: the way we currently manage and use passwords is so horridly broken that passwords have become nearly worthless as authenticators.

The most significant changes in the NIST guidance are as follows:

Never change passwords unless there is evidence of a compromise

No password complexity requirements beyond:

◦ A minimum length of 8 characters, with a maximum length not less than 64 characters

◦ All ASCII and Unicode characters are allowed

◦ No known bad passwords

◦ A minimum length of 8 characters, with a maximum length not less than 64 characters ◦ All ASCII and Unicode characters are allowed ◦ No known bad passwords Two-factor authentication has become a necessity, but using SMS for the second authenticator is out.

The new NIST password guidance is without question one of the biggest rethinks ever of our security mantra. Passwords have become increasingly weak (i.e., next to worthless) for over two decades now, so this new guidance is well past due, but highly welcome.

Thanks, NIST! Job well done.

Notes

1) NIST SP 800–63–3: Digital Identity Guidelines is a 4 volume set of guidelines for establishing digital identities and authenticating them. It is considered the industry standard best-practices guide for identity and authentication.

2) See the blog post, Two Factor Not, for a discussion of two-factor authentication and its strengths and weaknesses. (Coming soon!)

3) The majority of these recommendations are detailed in NIST SP 800–63B Authentication and Lifecycle Management, but some draw from recommendations in other NIST SP 800–63–3 guidelines.

4) All organizations should have a policy that prohibits the use of work email addresses from being used to register for any website. Why? Because this provides a potential attacker with information about the applications and resources used by the organization, which enables the attacker to build a detailed list of potential attack points into an organization. For more discussion on this topic, see my blog post, LinkedIn Is Your Worst Security Threat (coming soon!).

5) Unicode characters count as a single character and should be normalized prior to hashing. To quote NIST SP 800–63B, “For purposes of the above length requirements, each Unicode code point SHALL be counted as a single character. If Unicode characters are accepted in memorized secrets, the verifier SHOULD apply the Normalization Process for Stabilized Strings using either the NFKC or NFKD normalization defined in Section 12.1 of Unicode Standard Annex 15. This process is applied before hashing the byte string representing the memorized secret. [Users] choosing memorized secrets containing Unicode characters SHOULD be advised that some characters may be represented differently by [different operating systems], which can affect their ability to authenticate successfully.”

6) To quote NIST SP 800–63B: “In order to assist the claimant in successfully entering a memorized secret, the verifier SHOULD offer an option to display the secret — rather than a series of dots or asterisks — until it is entered. This allows the claimant to verify their entry if they are in a location where their screen is unlikely to be observed. The verifier MAY also permit the user’s device to display individual entered characters for a short time after each character is typed to verify correct entry.”

7) In general, knowledge-based authentication is a bad idea. There are simply too many ways to find the answer to knowledge-based prompts and for an attacker to thus social engineer their way into authenticating as that user. Whenever I am asked one of these “security questions,” I always make up completely bogus answers, and if the system will accept it, I use a very long string of completely random characters created by my password generator. (Naturally, store any bogus answer in your password database so you can provide your answer when prompted to do so.)

8) To summarize what NIST SP 800–63B specifies: “Memorized secrets SHALL be salted and hashed using a suitable one-way key derivation function. Key derivation functions take a password, a salt, and a cost factor as inputs then generate a password hash. … The chosen output length of the key derivation function SHOULD be the same as the length of the underlying one-way function output. … The salt SHALL be at least 32 bits in length and be chosen arbitrarily so as to minimize salt value collisions among stored hashes. Both the salt value and the resulting hash SHALL be stored for each subscriber using a memorized secret authenticator. … [T]he iteration count SHOULD be as large as verification server performance will allow, typically at least 10,000 iterations.”

9) NIST requires the password to be transmitted through a secure channel. Most implementations would meet this requirement using TLS, which in many cases, can be rather easily hacked. My recommendation is for the client to hash the password (server would have to provide salt and other parameters), and then send only the hash to the server. Thus, the password is never exposed, even if the secure channel should be compromised.

10) As discussed in the blog post, There Are Only Two Ways to Authenticate, biometrics are identifiers, not authenticators. NIST has basically agreed with this assessment, as they allow biometric measures to be used in authentication, only if the primary authentication factor is a “something you have” type of factor, such as a security token. Biometrics are simply too easy to attack to be allowed as an authenticator. (TL;DR. Authenticators must be deterministic. Since all biometric measures are deterministic, they not suitable as authenticators.)

11) I will discuss issues with SSO in an upcoming blog post.